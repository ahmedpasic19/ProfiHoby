// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Image         Image[]
    Worker        Worker?
    is_employed   Boolean   @default(false)
    Article       Article[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Article {
    id          String @id @default(cuid())
    name        String
    description String
    base_price  Float

    image              Image[]
    categories         CategoriesOnArticle[]
    groups             ArticleGroups[]
    attributes         Attribute[]
    brand              Brand?                @relation(fields: [brand_id], references: [id])
    User               User?                 @relation(fields: [userId], references: [id])
    userId             String?
    Worker             Worker?               @relation(fields: [workerId], references: [id])
    workerId           String?
    onDiscount         Boolean?              @default(false)
    discountPrice      Float?                @default(0)
    discountPercentage Float?                @default(0)
    published          Boolean               @default(false)
    brand_id           String?
    warranty           String?
    short_description  String?
    olx_id             Int?
    OrderArticle       OrderArticle[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Image {
    id         String  @id @default(cuid())
    name       String
    key        String  @unique
    access_url String?

    Article    Article? @relation(fields: [article_id], references: [id])
    article_id String?
    User       User?    @relation(fields: [userId], references: [id])
    userId     String?
}

model Category {
    id   String @id @default(cuid())
    name String

    articles CategoriesOnArticle[]
    groups   Group[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CategoriesOnArticle {
    article     Article  @relation(fields: [article_id], references: [id])
    article_id  String
    category    Category @relation(fields: [category_id], references: [id])
    category_id String
    assignedAt  DateTime @default(now())

    @@id([article_id, category_id])
}

model Group {
    id              String  @id @default(cuid())
    name            String
    olx_category_id String?

    category    Category        @relation(fields: [category_id], references: [id])
    category_id String
    articles    ArticleGroups[]
    brands      Brand[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ArticleGroups {
    article    Article  @relation(fields: [article_id], references: [id])
    article_id String
    group      Group    @relation(fields: [group_id], references: [id])
    group_id   String
    assignedAt DateTime @default(now())

    @@id([article_id, group_id])
}

model Worker {
    id String @id @default(cuid())

    user    User   @relation(fields: [user_id], references: [id])
    user_id String @unique

    articles Article[]
}

model Brand {
    id String @id @default(cuid())

    name     String
    articles Article[]
    group    Group?    @relation(fields: [group_id], references: [id])
    group_id String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Attribute {
    id String @id @default(cuid())

    title String
    text  String

    article    Article @relation(fields: [article_id], references: [id])
    article_id String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderArticle {
    id         String  @id @default(cuid())
    amount     Int
    price      Float   @default(0)
    totalPrice Float   @default(0)
    article    Article @relation(fields: [article_id], references: [id])
    article_id String
    order      Order   @relation(fields: [order_id], references: [id])
    order_id   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id           String         @id @default(cuid())
    token        String
    price        Float
    firstName    String?        @default(" ")
    lastName     String?        @default(" ")
    address      String?        @default(" ")
    phone_number String?        @default(" ")
    note         String?        @default(" ")
    articles     OrderArticle[]
    finished     Boolean        @default(false)
    isLocked     Boolean        @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
